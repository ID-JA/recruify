import { MantineColor } from '@mantine/core'
import { Table } from '@tanstack/react-table'
import { ReactNode } from 'react'

export type DataTableContextMenuItemProps =
  | {
      /**
       * Unique item key
       */
      key: string
    } & (
      | {
          /**
           * If true, insert an actions divider
           */
          divider: true
          icon?: never
          title?: never
          color?: never
          hidden?: never
          disabled?: never
          onClick?: never
        }
      | {
          divider?: never
          /**
           * Item icon
           */
          icon?: ReactNode

          /**
           * Item title; if not present, one will be generated by "humanizing"
           * the provided item key
           * (i.e. `viewRecord` -> `View record`)
           */
          title?: ReactNode

          /**
           * Item color
           */
          color?: MantineColor

          /**
           * if true, the menu item will not be shown
           */
          hidden?: boolean

          /**
           * if true, the menu item will be disabled
           */
          disabled?: boolean

          /**
           * Function to call when the menu item is clicked
           */
          onClick: () => void
        }
    )

export type DataGridProps<T> = {
  table: Table<T>
  onRowClick?: (record: T) => void
  rowContextMenu?: {
    /**
     * Context menu trigger; defaults to `rightClick` for classic behavior
     */
    trigger?: 'rightClick' | 'click'

    /**
     * Menu z-index; defaults to `3`
     */
    zIndex?: number

    /**
     * Boolean or function accepting the current record as parameter returning boolean;
     * if true, the menu will not be shown
     */
    hidden?: boolean | ((record: T) => boolean)

    /**
     * A function returning the row menu items for the current record
     */
    items: (record: T) => DataTableContextMenuItemProps[]
  }
}

export type DataGridColumn<T> = {
  /**
   * Column accessor; you can use dot-notation for nested objects property drilling
   * (i.e. `department.name` or `department.company.name`)
   */
  accessor: string

  /**
   * Optional column header title; if not present, one will be generated by "humanizing"
   * the provided column accessor
   * (i.e. `firstName` -> `First name`; `user.firstName` -> `User first name`)
   */
  title?: ReactNode

  render?: (record: T) => ReactNode

  textAlignment?: 'left' | 'right' | 'center'
}
